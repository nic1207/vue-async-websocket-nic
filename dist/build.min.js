/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAutoID = exports.createObjID = void 0;

var createObjID = function createObjID(keys) {
  var random = "";

  do {
    random = Math.random().toString(36).substring(2, 7);
  } while (random == "" || keys.indexOf(random) != -1);

  return random;
};

exports.createObjID = createObjID;
var sid = 0;

var createAutoID = function createAutoID(keys) {
  sid++;
  return sid;
};

exports.createAutoID = createAutoID;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Mixins = __webpack_require__(0);

var _Listeners = _interopRequireDefault(__webpack_require__(3));

var _Send = _interopRequireDefault(__webpack_require__(4));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defOptions = {
  'debug': true,
  'protocols': '',
  'load-on-start': false,
  'max-timeout': 5000,
  'reconnect': true,
  'max-reconnect-count': 4,
  'reconnect-delay': 2000,
  'create-autoid-func': null,
  'response-id': '-',
  'response-type': '_type'
};
var webSocketPlugin = {};

webSocketPlugin.install = function (Vue, url) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  console.log('webSocketPlugin.install(url=', url, 'options=', options, ')');

  if (typeof url === 'undefined' || url === null) {
    throw 'URL is not set';
  }

  var webSocket = null;
  options = _objectSpread(_objectSpread({}, defOptions), options);

  var _send = (0, _Send["default"])(options);

  var listener = (0, _Listeners["default"])();
  var reconnectCount = 0;
  var reconnectTimeout = null;

  var open = function open() {
    console.log('open()');
    if (webSocket !== null) return false;
    if (options['debug'] === true) console.log("[debug] Starting WebSocket on url: " + url);
    webSocket = new WebSocket(url);
    registerEvents();
  };

  var close = function close() {
    console.log('open()');
    if (webSocket === null) return false;
    if (options['debug'] === true) console.log("[debug] Close connection");
    webSocket.close();
  };

  var reconnect = function reconnect() {
    console.log('reconnect()');

    if (reconnectCount < options['max-reconnect-count']) {
      reconnectTimeout = setTimeout(function () {
        ++reconnectCount;
        webSocket = null;
        open();
      }, options['reconnect-delay']);
    } else {
      console.error("Couldn't reconnect after ".concat(reconnectCount, " times."));
    }
  };

  var registerEvents = function registerEvents() {
    console.log('registerEvents()');

    webSocket.onopen = function (event) {
      if (options['debug'] === true) console.log("[debug] Websocket Connection opened!");
      reconnectCount = 0;
      clearTimeout(reconnectTimeout);
      listener.fireListeners('onopen', event);
    };

    webSocket.onclose = function (event) {
      if (options['reconnect'] === true) reconnect();
      listener.fireListeners('onclose', event);
    };

    webSocket.onerror = function (event) {
      listener.fireListeners('onerror', event);
    };

    webSocket.onmessage = function (event) {
      console.log('onmessage()');
      if (options['debug'] === true) console.log("[debug] Message: ", event);
      var data = JSON.parse(event.data);

      if (options['response-id'] in data) {
        _send.fireCallback(data[options['response-id']]);

        return;
      }

      var type = data[options['response-type']] || 'any';
      listener.fireListeners(type, data);
    };
  };

  if (_typeof(url) === 'object') {
    webSocket = url;
    url = webSocket.url;
    registerEvents();
  } else if (webSocket === null && options['load-on-start'] === true) {
    open();
  }

  Vue.prototype.$websocket = {
    getReadyState: function getReadyState() {
      return webSocket.readyState;
    },
    sendAsync: function sendAsync(data) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return _send.sendAsync(webSocket, data, args);
    },
    send: function send(data) {
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return _send.send(webSocket, data, callback, args);
    },
    open: open,
    close: close,
    addEventListener: listener.addEventListener,
    removeEventListener: listener.removeEventListener
  };
};

var _default = webSocketPlugin;
exports["default"] = _default;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Mixins = __webpack_require__(0);

/* eslint-disable no-console */
var _default = function _default() {
  var listeners = {};

  var fireListeners = function fireListeners(type, data) {
    Object.keys(listeners).forEach(function (key) {
      var listener = listeners[key];

      if (listener.type.toLowerCase() === 'any' || listener.type === type) {
        listener.callback(data);
      }
    });
  };

  var addEventListener = function addEventListener(type, callback) {
    var id = (0, _Mixins.createObjID)(Object.keys(listeners));
    listeners[id] = {
      type: type === '' ? 'any' : type,
      callback: callback
    };
    return id;
  };

  var removeEventListener = function removeEventListener(id) {
    if (!(id in listeners)) {
      return false;
    }

    delete listeners[id];
    return true;
  };

  return {
    fireListeners: fireListeners,
    addEventListener: addEventListener,
    removeEventListener: removeEventListener
  };
};

exports["default"] = _default;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Mixins = __webpack_require__(0);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defSendArgs = {
  //Send
  'parse-json': true,
  //Timeouts
  'timeout': true,
  'max-timeout': -1,
  //Hooks
  'hooks': {
    'bad-websocket': null,
    'timed-out': null
  },
  //Calbacks args
  'callback': {
    'send-data-only': true
  }
};

var _default = function _default(options) {
  var callbacks = {};

  var fireCallback = function fireCallback(id) {
    console.log('fireCallback(', id, ')');
    console.log('callbacks=', callbacks);

    if (id in callbacks) {
      callbacks[id]['callback'](callbacks[id]['options']['send-data-only'] === true ? JSON.parse(event.data) : event);
      if ('timeout' in callbacks[id]) clearTimeout(callbacks[id]['timeout']); //

      delete callbacks[id];
    } else {
      console.log('id=', id);
      console.error("ID(data._id) is passed by message, but not found in callbacks!");
    }
  };

  var sendAsync = function sendAsync(webSocket, data) {
    var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return new Promise(function (resolve, reject) {
      send(webSocket, data, function (data) {
        resolve(data);
      }, _objectSpread(_objectSpread({}, args), {}, {
        'hooks': {
          'bad-websocket': function badWebsocket() {
            reject('Cannot send, as webSocket is null or not connected!');
          },
          'timed-out': function timedOut(timeout) {
            reject("No answer after ".concat(timeout, "ms!"));
          }
        }
      }));
    });
  };

  var send = function send(webSocket, data) {
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var args = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    args = _objectSpread(_objectSpread({}, defSendArgs), args);

    if (webSocket === null || webSocket.readyState != 1) {
      if (args['hooks']['bad-websocket'] !== null) args['hooks']['bad-websocket']();else throw "Cannot send, as webSocket is null or not connected!";
      return;
    }

    var msg = data;

    if (callback !== null) {
      var id = msg[options['create-id']] = options['create-autoid-func'] === true ? (0, _Mixins.createAutoID)(Object.keys(callbacks)) : (0, _Mixins.createObjID)(Object.keys(callbacks));
      callbacks[id] = {};
      callbacks[id]['options'] = args['callback'];
      callbacks[id]['callback'] = callback;

      if (args['timeout'] === true) {
        var timeout = args['max-timeout'] > 0 ? args['max-timeout'] : options['max-timeout'];
        callbacks[id]['timeout'] = setTimeout(function () {
          clearTimeout(callbacks[id]['timeout']);
          delete callbacks[id];
          if (args['hooks']['timed-out'] !== null) args['hooks']['timed-out'](timeout);else throw "No answer after ".concat(timeout, "ms!");
        }, timeout);
      }
    }

    if (args['parse-json'] === true) msg = JSON.stringify(msg); //

    if (options['debug'] === true) console.log("[debug] Send json: ", msg);
    webSocket.send(msg);
  };

  return {
    send: send,
    sendAsync: sendAsync,
    fireCallback: fireCallback
  };
};

exports["default"] = _default;

/***/ })
/******/ ]);